<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Back.Text" xml:space="preserve">
    <value>上一步</value>
  </data>
  <data name="CDNSet.Text" xml:space="preserve">
    <value>CDN:像火箭一样的速度！</value>
  </data>
  <data name="CDNSetDetail.Text" xml:space="preserve">
    <value>你知道吗，Crash Launcher的数据不是存储在一个服务器上，而是储存在世界各地的CDN（内容分发网络）上，以便全世界的人可以飞快地下载数据。在下面的CDN中，选择延时最小的一个，体验火箭一样的速度。</value>
  </data>
  <data name="ChoosePath.Text" xml:space="preserve">
    <value>选择文件夹</value>
  </data>
  <data name="Cloudflare.ToolTipService.ToolTip" xml:space="preserve">
    <value>托管在Backblaze，采用Cloudflare CDN（速度约等于Cloudflare的速度）的储存库（手动添加，可能更新不及时）</value>
  </data>
  <data name="DataPathSet.Text" xml:space="preserve">
    <value>选择你的数据目录</value>
  </data>
  <data name="DataPathSetDetail.Text" xml:space="preserve">
    <value>我们需要一个位置来存放文件，而你可以决定该把数据放在哪里。</value>
  </data>
  <data name="Finish.Text" xml:space="preserve">
    <value>完成</value>
  </data>
  <data name="Github.ToolTipService.ToolTip" xml:space="preserve">
    <value>Crash Launcher资源主仓库</value>
  </data>
  <data name="Header.Text" xml:space="preserve">
    <value>欢迎来到</value>
  </data>
  <data name="LanguageSet.Text" xml:space="preserve">
    <value>语言</value>
  </data>
  <data name="LanguageSetDetail.Text" xml:space="preserve">
    <value>这是正确的语言吗？</value>
  </data>
  <data name="Loading.Text" xml:space="preserve">
    <value>加载中，请稍后</value>
  </data>
  <data name="Next.Text" xml:space="preserve">
    <value>下一步</value>
  </data>
  <data name="Welcome.Text" xml:space="preserve">
    <value>新的起点，新的飞跃</value>
  </data>
  <data name="WelcomeDetail.Text" xml:space="preserve">
    <value>你可能已经注意到了，Sciencekill Toolkit已经改名为Crash Launcher。这将是一个史诗级的进步。在Crash Launcher，你将体会到无与伦比的便捷与美观。本次大版本更新放弃了丑陋的JavaFX，转而选择了具有Fluent Design系统的WinUI 3，因此，Crash Launcher将完美融入您的Windows11。现在要做的，点击“下一步”，开启一段新的旅程！</value>
  </data>
</root>